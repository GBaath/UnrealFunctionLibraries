//WORK IN PROGRESS


#pragma once

#include "VolumeInterpolator.h"
#include "Components/BrushComponent.h"
#include "CommonFunctions.h"

#include "Kismet/KismetMathLibrary.h"
#include "Kismet/KismetSystemLibrary.h"
#include "KismetProceduralMeshLibrary.h"

#include "GeometryAlgorithmsModule.h"
#include "MinVolumeBox3.h"
#include "OrientedBoxTypes.h"
// Sets default values for this component's properties
UVolumeInterpolator::UVolumeInterpolator()
{
	// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features
	// off to improve performance if you don't need them.
	PrimaryComponentTick.bCanEverTick = true;

	// ...
}


void UVolumeInterpolator::GenerateNewPoints(float MaxMovementLength,AVolume* SourceVolume, AVolume* TrackingVolume)
{
	if (SourceVolume == nullptr)
		return;
	if (TrackingVolume == nullptr)
		return;

	FBoxSphereBounds Bounds1 = TrackingVolume->GetBounds();
	FBoxSphereBounds Bounds2 = SourceVolume->GetBounds();


	//new startpoints
	SourceStart = FMath::RandPointInBox(Bounds1.GetBox());
	TrackStart = FMath::RandPointInBox(Bounds2.GetBox());

	//new endpoints to interp to
	SourceEnd = FMath::RandPointInBox(Bounds1.GetBox());
	TrackEnd = FMath::RandPointInBox(Bounds2.GetBox());

	StartRotation = UKismetMathLibrary::FindLookAtRotation(TrackStart, SourceStart).Quaternion();
	StartDist = (SourceStart - TrackStart).Length();
	EndDist = StartDist - FMath::FRandRange(-MaxMovementLength, MaxMovementLength);

	TargetRotation = UKismetMathLibrary::FindLookAtRotation(TrackEnd, SourceEnd).Quaternion();
}

void UVolumeInterpolator::StartInterpolatePoints()
{
	DoInterp = true;
	Alpha = 0;
}

void UVolumeInterpolator::TickInterpolate(float DeltaTime,float& outDist, FVector& CurrentLoc, FVector& TrackingPoint,FRotator& CurrentRot)
{
	
	FMath::Clamp(Alpha += DeltaTime * InterpSpeed,0,1);

	float newdist = FMath::Lerp(StartDist, EndDist, Alpha);

	FRotator RefRot = FQuat::Slerp(StartRotation, TargetRotation, Alpha).Rotator();
	TrackCurrent = UKismetMathLibrary::VLerp(TrackStart, TrackEnd, Alpha);
	SourceCurrent = UCommonFunctions::LocationFromDistanceAndRotation(TrackCurrent, RefRot, newdist);

	LookatRotation = UKismetMathLibrary::FindLookAtRotation(SourceCurrent, TrackCurrent);

	outDist = newdist;
	TrackingPoint = TrackCurrent;
	CurrentRot = RefRot;
	CurrentLoc = SourceCurrent;

	if (Alpha >= 1) {
		InterpCompletedEvent.Broadcast();
		DoInterp = false;
	}
}

// Called when the game starts
void UVolumeInterpolator::BeginPlay()
{
	Super::BeginPlay();

	// ...
	
}


// Called every frame
void UVolumeInterpolator::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
	
	Super::TickComponent(DeltaTime, TickType, ThisTickFunction);


	//if(DoInterp)
	//	TickInterpolate(DeltaTime);

}


//TODO call in start
//this should not be recalculated during runtime
static void GetSmallestBoundingShape(const FTransform WorldTransform, TArray<FVector> Verts, FBoxSphereBounds& OutData, FRotator& OutRotationData, bool& BoxIsSmallest) {
    UE::Geometry::TMinVolumeBox3<float> box;

    //TODO test if this computes correctly
    TFunctionRef<FVector3f(int32)> GetPoint =
        [Verts](int32 i) {
        return (FVector3f)Verts[FMath::Clamp(i, 0, Verts.Num() - 1)];
        };

    //get smallest boundingbox
    UE::Geometry::FOrientedBox3f OBox;
    if (box.Solve(Verts.Num(), GetPoint, false)) {
        box.GetResult(OBox);
        return;
    }
    else
    {
        BoxIsSmallest = false;
        //return SphereData
        //largest radius is smallest boundingbox
        float LargestRadius = 0.f;
        for (FVector& vert : Verts) {
            LargestRadius = FMath::Max(vert.Length(), LargestRadius);
        }
        OutData.SphereRadius = LargestRadius;

        return;
    }
    //TODO make inlinefunc
    //largest radius is smallest boundingbox
    float LargestRadius = 0.f;
    for (FVector& vert : Verts) {
        LargestRadius = FMath::Max(vert.Length(), LargestRadius);
    }

    //compare volumes
    if (OBox.Volume() > ((4 / 3) * UKismetMathLibrary::GetPI() * FMath::Cube(LargestRadius))) {
        BoxIsSmallest = false;
        OutData.SphereRadius = LargestRadius;
        return;
    }

    BoxIsSmallest = true;

    //TODO test wether this scales with objectscale
    //TODO test if rotationdata get translated
    OutData.BoxExtent = (FVector)OBox.Extents;
    OutRotationData = (FRotator)OBox.Frame.Rotation;
}

static void GetDataFromVerticies(UStaticMeshComponent* Mesh, const FTransform WorldTransform, TArray<FVector>& Verts, FJsonSerializableArrayInt& TriangleIndexes, TArray<FVector>& Normals, float& OutAvgRadiusToCenter, float& OutMaxRadiusToCenter, FBox& OutMaxBoxBounds) {

    OutMaxRadiusToCenter = 0;
    OutAvgRadiusToCenter = 0;
    OutMaxBoxBounds.Init();

    TArray<FVector2D> UV;
    TArray<FProcMeshTangent> Tangents;
    UKismetProceduralMeshLibrary::GetSectionFromStaticMesh(Mesh->GetStaticMesh(), 0, 0, Verts, TriangleIndexes, Normals, UV, Tangents);

    float MagnitudeValues = 0;

    bool bBoxIsBoundingVolume = false;
    FBoxSphereBounds Bounds;
    //verts are localspace
    GetSmallestBoundingShape(WorldTransform, Verts, Bounds, bBoxIsBoundingVolume);

    //Randomize point using radius or box depening on smallest error margin 
    if (bBoxIsBoundingVolume) {

        OutMaxBoxBounds = Bounds.GetBox();
    }
    else {
        for (FVector& vert : Verts) {

            UKismetSystemLibrary::DrawDebugPoint(Mesh, vert, 3.f, FLinearColor::Blue, 5.f);

            UCommonFunctions::TransformVector(vert, WorldTransform);
            UKismetSystemLibrary::DrawDebugPoint(Mesh, vert, 3.f, FLinearColor::Red, 5.f);

            //I think Minimum radius in reduntant since the testRadius will shrink towards zero

            //meassure length and add to total sum
            float Magnitude = (vert - WorldTransform.GetLocation()).Length();
            MagnitudeValues += Magnitude;

            //maxradius from boundingshape
            //this or larges side of the localspace boundingbox
           // OutMaxRadiusToCenter = FMath::Max(Magnitude, OutMaxRadiusToCenter);
        }
        if (Verts.Num() <= 0) {
            UE_LOG(LogTemp, Warning, TEXT("Verticies Array is 0"));
            return;
        }

        OutAvgRadiusToCenter = MagnitudeValues / Verts.Num();
        OutAvgRadiusToCenter;
        OutMaxRadiusToCenter = Bounds.SphereRadius;
        OutMaxRadiusToCenter;
    }

    return;
}
static int RayMeshIntersectionCount(UStaticMeshComponent* Mesh, FVector RayStart, FVector RayVector, const FTransform WorldTransform)
{

    int LoopIndex = 0;
    int Intersections = 0;
    FJsonSerializableArrayInt Triangles;
    TArray<FVector> MeshVerticies;
    TArray<FVector> Normals;

    TArray<FVector2D> UV;
    TArray<FProcMeshTangent> Tangents;
    UKismetProceduralMeshLibrary::GetSectionFromStaticMesh(Mesh->GetStaticMesh(), 0, 0, MeshVerticies, Triangles, Normals, UV, Tangents);

    //iterate triangles
    while (LoopIndex < Triangles.Num() - 2) {

        TArray<FVector> TriangleToRayCheck;

        for (int8 TriangleVertex = 0; TriangleVertex < 3; TriangleVertex++)
        {
            //somethings incorrect with the indexes here pos is need to convert from localspace to worldspace, vertex points are relative to world origin i think
            FVector WorldSpaceNormal = ((Normals[Triangles[LoopIndex + TriangleVertex]]));
            UCommonFunctions::TransformVector(WorldSpaceNormal, WorldTransform);
            double dotPr = UKismetMathLibrary::Dot_VectorVector(RayVector, WorldSpaceNormal);

            //triangle cant be intersected aka angle is 90 deg
            if (dotPr == 0)
                break;

            FVector WorldSpaceVertex = (MeshVerticies[Triangles[LoopIndex + TriangleVertex]]);

            UCommonFunctions::TransformVector(WorldSpaceVertex, WorldTransform);

            TriangleToRayCheck.Add(WorldSpaceVertex);
        }

        if (TriangleToRayCheck.Num() == 3) {

            FVector IntersectionPoint;
            if (UCommonFunctions::RayIntersectsTriangle(RayStart, RayVector, TriangleToRayCheck, IntersectionPoint))
                Intersections++;

        }
        TriangleToRayCheck.Empty();

        LoopIndex++;
    }

    return Intersections;
}

//literally stolen from wikipedia, MÃ¶ller Trumbore alg
bool UVolumeInterpolator::RayIntersectsTriangle(FVector RayOrigin, FVector RayVector, const TArray<FVector>Triangle, FVector& OutIntersectionPoint)
{
    constexpr float ep = std::numeric_limits<float>::epsilon();

    FVector TriVert0 = Triangle[0];
    FVector TriVert1 = Triangle[1];
    FVector TriVert2 = Triangle[2];

    FVector edge1 = TriVert1 - TriVert0;
    FVector edge2 = TriVert2 - TriVert0;
    FVector RayCrossEdge2 = UKismetMathLibrary::Cross_VectorVector(RayVector, edge2);
    float DotEdge1 = UKismetMathLibrary::Dot_VectorVector(edge1, RayCrossEdge2);

    if (DotEdge1 > -ep && DotEdge1 < ep)
        return false;    // This ray is parallel to this triangle.

    float InverseDotEdge1 = 1.0 / DotEdge1;
    FVector s = RayOrigin - TriVert0;
    float u = InverseDotEdge1 * UKismetMathLibrary::Dot_VectorVector(s, RayCrossEdge2);

    if (u < 0 || u > 1)
        return false;

    FVector s_cross_e1 = UKismetMathLibrary::Cross_VectorVector(s, edge1);
    float v = InverseDotEdge1 * UKismetMathLibrary::Dot_VectorVector(RayVector, s_cross_e1);

    if (v < 0 || u + v > 1)
        return false;

    // At this stage we can compute t to find out where the intersection point is on the line.
    float t = InverseDotEdge1 * UKismetMathLibrary::Dot_VectorVector(edge2, s_cross_e1);

    if (t > ep) // ray intersection
    {
        OutIntersectionPoint = RayOrigin + RayVector * t;
        return true;
    }
    else // This means that there is a line intersection but not a ray intersection.
        return false;
}

FVector UVolumeInterpolator::GetRandomPointsInMeshBounds(UStaticMeshComponent* Mesh, const FTransform WorldTransform, float& outAvgRadius, float& outMaxRadius)
{
    float AvgRadius, MaxRadius;
    FBox BoundingBox;

    TArray<FVector> Verts;
    FJsonSerializableArrayInt Triangles;
    TArray<FVector> Normals;

    //calculate radiuses or boundingbox for randomizing the point with the least margin for error, normal distrubution at the avarageradius
    //save vertex data for point in polygon alg
    GetDataFromVerticies(Mesh, WorldTransform, Verts, Triangles, Normals, AvgRadius, MaxRadius, BoundingBox);

    //Generate random point in boundingsphere
    FVector Point;// = WorldTransform.GetLocation();
    int maxiterations = 100;
    int i = 0;

    //Spherebounds were bigger than Boxbounds, use box
    if (MaxRadius == 0) {
        do
        {
            //TODO make sure this is calculated using local coords

            //less range for every iteration
            float AlphaMinus = i * 0.01f;
            //get random xyz val from box
            Point.X = FMath::Lerp(BoundingBox.Min.X, BoundingBox.Max.X, FMath::FRandRange(0.f, 1.f - AlphaMinus));
            Point.Y = FMath::Lerp(BoundingBox.Min.Y, BoundingBox.Max.Y, FMath::FRandRange(0.f, 1.f - AlphaMinus));
            Point.Z = FMath::Lerp(BoundingBox.Min.Z, BoundingBox.Max.Z, FMath::FRandRange(0.f, 1.f - AlphaMinus));
            i++;
        } //point in polygon intersections always odd
        while (RayMeshIntersectionCount(Mesh, Point, FVector(100000, 0, 0), WorldTransform) % 2 == 0 && i < maxiterations);
    }
    //Ãsing radius
    else {
        //compare radiuses from functions and ranomize, set length of unit vector, until point is in bounds
        do {
            //less range for every iteration
            float AlphaMinus = i * 0.01f;
            Point = UKismetMathLibrary::RandomUnitVector();

            //1 is toward maxradius, -1 is toward 0
            float Alpha = FMath::FRandRange(FMath::Min(0, -1.0f - AlphaMinus), 1.0f - AlphaMinus);

            //lerp to max or 0
            if (Alpha > 0)
                Point *= FMath::Lerp(AvgRadius, MaxRadius, Alpha);
            else
                Point *= FMath::Lerp(0, AvgRadius, FMath::Abs(Alpha));

            Point += WorldTransform.GetLocation();
            i++;
            //point in polygon intersections always odd
        } while (RayMeshIntersectionCount(Mesh, Point, FVector(100000, 0, 0), WorldTransform) % 2 == 0 && i < maxiterations);
        outAvgRadius = AvgRadius;
        outMaxRadius = MaxRadius;

    }


    return Point;
}



