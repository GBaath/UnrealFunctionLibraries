// Fill out your copyright notice in the Description page of Project Settings.
#pragma once

#include "VolumeInterpolator.h"
#include "Components/BrushComponent.h"
#include "CommonFunctions.h"

#include "Kismet/KismetMathLibrary.h"
#include "Kismet/KismetSystemLibrary.h"
#include "KismetProceduralMeshLibrary.h"

#include "GeometryAlgorithmsModule.h"
#include "MinVolumeBox3.h"
#include "OrientedBoxTypes.h"
// Sets default values for this component's properties
UVolumeInterpolator::UVolumeInterpolator()
{
	// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features
	// off to improve performance if you don't need them.
	PrimaryComponentTick.bCanEverTick = true;

	// ...
}


void UVolumeInterpolator::GenerateNewPoints(float MaxMovementLength,AVolume* SourceVolume, AVolume* TrackingVolume)
{
	if (SourceVolume == nullptr)
		return;
	if (TrackingVolume == nullptr)
		return;

	FBoxSphereBounds Bounds1 = TrackingVolume->GetBounds();
	FBoxSphereBounds Bounds2 = SourceVolume->GetBounds();


	//new startpoints
	SourceStart = FMath::RandPointInBox(Bounds1.GetBox());
	TrackStart = FMath::RandPointInBox(Bounds2.GetBox());

	//new endpoints to interp to
	SourceEnd = FMath::RandPointInBox(Bounds1.GetBox());
	TrackEnd = FMath::RandPointInBox(Bounds2.GetBox());

	StartRotation = UKismetMathLibrary::FindLookAtRotation(TrackStart, SourceStart).Quaternion();
	StartDist = (SourceStart - TrackStart).Length();
	EndDist = StartDist - FMath::FRandRange(-MaxMovementLength, MaxMovementLength);

	TargetRotation = UKismetMathLibrary::FindLookAtRotation(TrackEnd, SourceEnd).Quaternion();
}

void UVolumeInterpolator::StartInterpolatePoints()
{
	DoInterp = true;
	Alpha = 0;
}

void UVolumeInterpolator::TickInterpolate(float DeltaTime,float& outDist, FVector& CurrentLoc, FVector& TrackingPoint,FRotator& CurrentRot)
{
	
	FMath::Clamp(Alpha += DeltaTime * InterpSpeed,0,1);

	float newdist = FMath::Lerp(StartDist, EndDist, Alpha);

	FRotator RefRot = FQuat::Slerp(StartRotation, TargetRotation, Alpha).Rotator();
	TrackCurrent = UKismetMathLibrary::VLerp(TrackStart, TrackEnd, Alpha);
	SourceCurrent = UCommonFunctions::LocationFromDistanceAndRotation(TrackCurrent, RefRot, newdist);

	LookatRotation = UKismetMathLibrary::FindLookAtRotation(SourceCurrent, TrackCurrent);

	outDist = newdist;
	TrackingPoint = TrackCurrent;
	CurrentRot = RefRot;
	CurrentLoc = SourceCurrent;

	if (Alpha >= 1) {
		InterpCompletedEvent.Broadcast();
		DoInterp = false;
	}
}

// Called when the game starts
void UVolumeInterpolator::BeginPlay()
{
	Super::BeginPlay();

	// ...
	
}


// Called every frame
void UVolumeInterpolator::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
	
	Super::TickComponent(DeltaTime, TickType, ThisTickFunction);


	//if(DoInterp)
	//	TickInterpolate(DeltaTime);

}
FOrientedBox ConvertFrom3f(UE::Geometry::FOrientedBox3f InBox) {

    FOrientedBox OutBox;


    OutBox.AxisX = (FVector)InBox.AxisX();
    OutBox.AxisY = (FVector)InBox.AxisY();
    OutBox.AxisZ = (FVector)InBox.AxisZ();

    OutBox.Center = (FVector)InBox.Center();

    OutBox.ExtentX = InBox.Extents.X*2;
    OutBox.ExtentY = InBox.Extents.Y*2;
    OutBox.ExtentZ = InBox.Extents.Z*2;

    return OutBox;

}

//TODO call in start
//this should not be recalculated during runtime
void GetSmallestBoundingShape(const FTransform WorldTransform, TArray<FVector> Verts, float& OutRadius , FOrientedBox& OutBox, bool& BoxIsSmallest) {
    UE::Geometry::TMinVolumeBox3<float> box;

    TFunctionRef<FVector3f(int32)> GetVertexInWorldSpace =
        [Verts,WorldTransform](int32 i) {

        FVector V  = Verts[FMath::Clamp(i, 0, Verts.Num() - 1)];
        UCommonFunctions::TransformVector(V, WorldTransform);

        return (FVector3f)V;
        };

    //get smallest boundingbox
    UE::Geometry::FOrientedBox3f OBox;
    if (box.Solve(Verts.Num(), GetVertexInWorldSpace, true)) {
        box.GetResult(OBox);
    }
    else
    {
        UE_LOG(LogTemp, Warning, TEXT("Failed To Solve BoxVolume"));

        BoxIsSmallest = false;
        //return SphereData
        //largest radius is smallest boundingbox
        float LargestRadius = 0.f;
        for (FVector& vert : Verts) {
            FVector V = vert;
            UCommonFunctions::TransformVector(V, WorldTransform);
            LargestRadius = FMath::Max(V.Length(), LargestRadius);
        }
       OutRadius = LargestRadius;

        return;
    }
    //TODO make inlinefunc
    //largest radius is smallest bounding
    float LargestRadius = 0.f;
    for (FVector& vert : Verts) {
        FVector V = vert;
        UCommonFunctions::TransformVector(V, WorldTransform);
        LargestRadius = FMath::Max(V.Length(), LargestRadius);
    }

    //compare volumes
    if (OBox.Volume() > ((4 / 3) * UKismetMathLibrary::GetPI() * FMath::Cube(LargestRadius))) {
        BoxIsSmallest = false;
        OutRadius = LargestRadius;
        return;
    }

    BoxIsSmallest = true;

    //TODO test wether this scales with objectscale
    //TODO test if rotationdata get translated

    OutBox = ConvertFrom3f(OBox);

    return;
}
void GetDataFromVerticies(UStaticMeshComponent* Mesh, const FTransform WorldTransform, TArray<FVector>& Verts, FJsonSerializableArrayInt& TriangleIndexes, TArray<FVector>& Normals,
    float& OutAvgRadiusToCenter, float& OutMaxRadiusToCenter, bool& bBoxIsSmallestBoundingShape, FOrientedBox& OutMaxBoxBounds) {

    OutMaxRadiusToCenter = 0;
    OutAvgRadiusToCenter = 0;

    TArray<FVector2D> UV;
    TArray<FProcMeshTangent> Tangents;
    UKismetProceduralMeshLibrary::GetSectionFromStaticMesh(Mesh->GetStaticMesh(), 0, 0, Verts, TriangleIndexes, Normals, UV, Tangents);

    float MagnitudeValues = 0;
    float Radius = 0;

    FOrientedBox Box;


    //REPLACE FUNCTION WITH VARIABLES SET FROM START
    //verts are localspace
    GetSmallestBoundingShape(WorldTransform, Verts, Radius, Box ,bBoxIsSmallestBoundingShape);

    //Randomize point using radius or box depening on smallest error margin 
    if (bBoxIsSmallestBoundingShape) {

        OutMaxBoxBounds = Box;
        return;
    }
    else {
        //iterate for avarageradius
        for (FVector& vert : Verts) {

            UKismetSystemLibrary::DrawDebugPoint(Mesh, vert, 3.f, FLinearColor::Blue, 5.f);

            UCommonFunctions::TransformVector(vert, WorldTransform);
            UKismetSystemLibrary::DrawDebugPoint(Mesh, vert, 3.f, FLinearColor::Red, 5.f);

            //I think Minimum radius in reduntant since the testRadius will shrink towards zero

            //meassure length and add to total sum
            float Magnitude = (vert - WorldTransform.GetLocation()).Length();
            MagnitudeValues += Magnitude;

        }
        if (Verts.Num() <= 0) {
            UE_LOG(LogTemp, Warning, TEXT("Verticies Array is 0"));
            return;
        }

        OutAvgRadiusToCenter = MagnitudeValues / Verts.Num();
        OutAvgRadiusToCenter;
        OutMaxRadiusToCenter = Radius;
        OutMaxRadiusToCenter;
    }

    return;
}
int UVolumeInterpolator::RayMeshIntersectionCount(UStaticMeshComponent* Mesh, FVector RayStart, FVector RayVector, const FTransform WorldTransform)
{

    int LoopIndex = 0;
    int Intersections = 0;
    FJsonSerializableArrayInt Triangles;
    TArray<FVector> MeshVerticies;
    TArray<FVector> Normals;

    TArray<FVector2D> UV;
    TArray<FProcMeshTangent> Tangents;
    UKismetProceduralMeshLibrary::GetSectionFromStaticMesh(Mesh->GetStaticMesh(), 0, 0, MeshVerticies, Triangles, Normals, UV, Tangents);

    //iterate triangles
    while (LoopIndex < Triangles.Num() - 2) {

        TArray<FVector> TriangleToRayCheck;

        for (int8 TriangleVertex = 0; TriangleVertex < 3; TriangleVertex++)
        {
            //somethings incorrect with the indexes here pos is need to convert from localspace to worldspace, vertex points are relative to world origin i think
            FVector WorldSpaceNormal = ((Normals[Triangles[LoopIndex + TriangleVertex]]));
            //UCommonFunctions::TransformVector(WorldSpaceNormal, WorldTransform);
            double dotPr = UKismetMathLibrary::Dot_VectorVector(RayVector, WorldSpaceNormal);

            //triangle cant be intersected aka angle is 90 deg
            if (dotPr == 0)
                break;

            FVector WorldSpaceVertex = (MeshVerticies[Triangles[LoopIndex + TriangleVertex]]);

            UCommonFunctions::TransformVector(WorldSpaceVertex, WorldTransform);

            TriangleToRayCheck.Add(WorldSpaceVertex);
        }

        if (TriangleToRayCheck.Num() == 3) {

            FVector IntersectionPoint;
            if (RayIntersectsTriangle(RayStart, RayVector, TriangleToRayCheck, IntersectionPoint))
                Intersections++;

        }
        TriangleToRayCheck.Empty();

        LoopIndex++;
    }

    return Intersections;
}

//literally stolen from wikipedia, MÃ¶ller Trumbore alg
bool UVolumeInterpolator::RayIntersectsTriangle(FVector RayOrigin, FVector RayVector, const TArray<FVector>Triangle, FVector& OutIntersectionPoint)
{
    constexpr float ep = std::numeric_limits<float>::epsilon();

    FVector TriVert0 = Triangle[0];
    FVector TriVert1 = Triangle[1];
    FVector TriVert2 = Triangle[2];

    FVector edge1 = TriVert1 - TriVert0;
    FVector edge2 = TriVert2 - TriVert0;
    FVector RayCrossEdge2 = UKismetMathLibrary::Cross_VectorVector(RayVector, edge2);
    float DotEdge1 = UKismetMathLibrary::Dot_VectorVector(edge1, RayCrossEdge2);

    if (DotEdge1 > -ep && DotEdge1 < ep)
        return false;    // This ray is parallel to this triangle.

    float InverseDotEdge1 = 1.0 / DotEdge1;
    FVector s = RayOrigin - TriVert0;
    float u = InverseDotEdge1 * UKismetMathLibrary::Dot_VectorVector(s, RayCrossEdge2);

    if (u < 0 || u > 1)
        return false;

    FVector s_cross_e1 = UKismetMathLibrary::Cross_VectorVector(s, edge1);
    float v = InverseDotEdge1 * UKismetMathLibrary::Dot_VectorVector(RayVector, s_cross_e1);

    if (v < 0 || u + v > 1)
        return false;

    // At this stage we can compute t to find out where the intersection point is on the line.
    float t = InverseDotEdge1 * UKismetMathLibrary::Dot_VectorVector(edge2, s_cross_e1);

    if (t > ep) // ray intersection
    {
        OutIntersectionPoint = RayOrigin + RayVector * t;
        return true;
    }
    else // This means that there is a line intersection but not a ray intersection.
        return false;
}

FVector UVolumeInterpolator::GetRandomPointsInMeshBounds(UStaticMeshComponent* Mesh, const FTransform WorldTransform, float& outAvgRadius, float& outMaxRadius, bool& OutTryBox)
{
    float AvgRadius, MaxRadius;
    FOrientedBox BoundingBox;
    bool bBoxBounds = false;

    TArray<FVector> Verts;
    FJsonSerializableArrayInt Triangles;
    TArray<FVector> Normals;

    //calculate radiuses or boundingbox for randomizing the point with the least margin for error, normal distrubution at the avarageradius
    //save vertex data for point in polygon alg
    GetDataFromVerticies(Mesh, WorldTransform, Verts, Triangles, Normals, AvgRadius, MaxRadius, bBoxBounds, BoundingBox);

    //Generate random point in boundingsphere
    FVector Point;// = WorldTransform.GetLocation();
    int maxiterations = 1000;
    int i = 0;
    OutTryBox = bBoxBounds;

    //Spherebounds were bigger than Boxbounds, use box
    if (bBoxBounds) {

        

        do
        {
            //less range for every iterationÂ´, after 100 i alpha is always .5f
            float AlphaMinus = i * 0.005f;
            //get random xyz val from box
            Point = BoundingBox.Center;
            FVector AddVector = FVector::Zero();
        /*    float r1 = FMath::FRandRange(0.0f, 1.0f);
            float r2 = FMath::FRandRange(0 + AlphaMinus, 1 - AlphaMinus);
            float r3 = FMath::FRandRange(0 + AlphaMinus, 1 - AlphaMinus);*/


            AddVector += BoundingBox.AxisX * FMath::Lerp(BoundingBox.ExtentX* -.5f, BoundingBox.ExtentX*.5f, FMath::FRandRange(0 + AlphaMinus, 1 - AlphaMinus));
            AddVector += BoundingBox.AxisY * FMath::Lerp(BoundingBox.ExtentY* -.5f, BoundingBox.ExtentY*.5f, FMath::FRandRange(0 + AlphaMinus, 1 - AlphaMinus));
            AddVector += BoundingBox.AxisZ * FMath::Lerp(BoundingBox.ExtentZ* -.5f, BoundingBox.ExtentZ*.5f,  FMath::FRandRange(0 + AlphaMinus, 1 - AlphaMinus));

            Point += AddVector;

            i++;
        } //point in polygon intersections always odd
        while (RayMeshIntersectionCount(Mesh, Point, FVector(100000, 0, 0), WorldTransform) % 2 == 0 && i < maxiterations);

        UE_LOG(LogTemp, Warning, TEXT("%d"), i);
    }
    //Ãsing radius
    else {
        //compare radiuses from functions and ranomize, set length of unit vector, until point is in bounds
        do {
            //less range for every iteration
            float AlphaMinus = i * 0.005f;
            Point = UKismetMathLibrary::RandomUnitVector();

            //1 is toward maxradius, -1 is toward 0
            Alpha = FMath::FRandRange(FMath::Min(0, -1.0f + AlphaMinus), 1.0f - AlphaMinus);

            //lerp to max or 0
            if (Alpha > 0)
                Point *= FMath::Lerp(AvgRadius, MaxRadius, Alpha);
            else
                Point *= FMath::Lerp(0, AvgRadius, FMath::Abs(Alpha));

            Point += WorldTransform.GetLocation();
            i++;
            //point in polygon intersections always odd
        } while (RayMeshIntersectionCount(Mesh, Point, FVector(100000, 0, 0), WorldTransform) % 2 == 0);//&& i < maxiterations);
        outAvgRadius = AvgRadius;
        outMaxRadius = MaxRadius;

    }


    return Point;
}



